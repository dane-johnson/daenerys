(import operator)

;; Nice macros for making functions and macros
(def defn (macro (name args expression) `(def ~name (fn ~args ~expression))))
(def defmacro (macro (name args expression) `(def ~name (macro ~args ~expression))))

(defmacro or
  (x y)
  `(if ~x ~x ~y))
(defmacro and
  (x y)
  `(if ~x ~y))
(defn not (x)
  (if x
    False
    True))

(defn map (f l)
  (if l
    (cons (f (car l)) (map f (cdr l)))
    nil))
(defn fold (f l s)
  (if l
    (fold f (cdr l) (f s (car l)))
    s))
(defn inc (x) (+ x 1))
(defn dec (x) (- x 1))
(defn zero? (x) (= 0 x))

(defn +' (a b)
  (. operator add a b))

(defn + (& nums)
  (fold +' nums 0))

(defn str (& xs)
  (fold (fn (a b) (+' a (->str b))) xs ""))

(defn -' (a b)
  (. operator sub a b))

(defn - (x & rest)
  (if rest
    (fold -' rest x)
    (. operator neg x)))

(defn *' (a b)
  (. operator mul a b))

(defn * (& nums)
  (fold *' nums 1))
